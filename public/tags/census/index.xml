<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Census on R &amp; Census</title>
    <link>/tags/census/</link>
    <description>Recent content in Census on R &amp; Census</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Jan 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/census/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Is your town named after Lincoln or Washington?</title>
      <link>/2018/01/27/the-most-popular-president-lincoln-or-washington/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/27/the-most-popular-president-lincoln-or-washington/</guid>
      <description>&lt;p&gt;Washington and Lincoln are the two greatest presidents in the history of the United States. This post, however, does not discuss how great they are. Instead, I want to show a fun fact related the two presidents: how many cities and towns (and equivalents) are named after them. I am living in Lincoln, Rhode Island, a town so named in honor of President Lincoln.&lt;/p&gt;
&lt;p&gt;The data are extracted from decennial census 2010, the most detailed census so far. There are 311 cities and towns having “Washington” in their names and 205 having “Lincoln”. We also extract the coordinates and population of these cities and towns and plot them on the US map. There are significantly more places named after “Washington” than “Lincoln” in three states, Indiana , Ohio, and Pennsylvania. They combined have 109 more places with &lt;code&gt;Washington&lt;/code&gt; than with &lt;code&gt;Lincoln&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2018-01-23-the-most-popular-president-lincoln-or-washington_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2018-01-23-the-most-popular-president-lincoln-or-washington_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;816&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here are the code. We use package &lt;a href=&#34;https://github.com/GL-Li/totalcensus&#34;&gt;&lt;code&gt;totalcensus&lt;/code&gt;&lt;/a&gt; to extract data from decennial census 2010.&lt;/p&gt;
&lt;p&gt;Let’s first load packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(totalcensus)
library(data.table)
library(magrittr)
library(ggmap)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Define a function to extract census data of cities and towns including particular words in names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_area &amp;lt;- function(keywords){
    # read census data
    selected &amp;lt;- read_decennial(
        year = 2010,
        states = &amp;quot;US&amp;quot;,
        geo_headers = c(&amp;quot;NAME&amp;quot;),
        show_progress = FALSE
    ) %&amp;gt;%
        # select place and county subdivision that have name in NAME
        .[SUMLEV %in% c(&amp;quot;060&amp;quot;, &amp;quot;160&amp;quot;)] %&amp;gt;%
        .[NAME %like% paste0(keywords, collapse = &amp;quot;|&amp;quot;)] %&amp;gt;%
        # remove duplicates by (lon, lat)
        unique(by = c(&amp;quot;lon&amp;quot;, &amp;quot;lat&amp;quot;))
    
    # add area column to store keywords of area
    for (nm in keywords){
        selected[NAME %like% nm, area := nm]
    }
    
    return(selected)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The cities or town having words “Washington” or “Lincoln” in their names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wl &amp;lt;- get_area(c(&amp;quot;Washington&amp;quot;, &amp;quot;Lincoln&amp;quot;)) %&amp;gt;%
    .[, area := factor(area, c(&amp;quot;Washington&amp;quot;, &amp;quot;Lincoln&amp;quot;))]

# first five rows
  #           lon      lat state                NAME population GEOCOMP SUMLEV       area
  # 1:  -86.10771 33.61350    AL         Lincoln CCD       7771   total    060    Lincoln
  # 2:  -86.07064 33.62218    AL        Lincoln city       6266   total    160    Lincoln
  # 3: -111.27100 34.40035    AZ Washington Park CDP         70   total    160 Washington
  # 4:  -92.13358 33.43522    AR Washington township       1410   total    060 Washington
  # 5:  -92.70242 35.23478    AR Washington township       1852   total    060 Washington&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plot the cities and towns on a map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;us &amp;lt;- map_data(&amp;#39;state&amp;#39;)
ggplot(us, aes(long, lat)) +
    geom_map(map=us, aes(map_id=region), fill=&amp;quot;grey97&amp;quot;, color=&amp;quot;grey&amp;quot;) +
    geom_point(data = wl[order(-population)], aes(lon, lat, size = population, color = area), alpha = 0.6) +
    scale_size_area(max_size = 10, breaks = c(1000, 10000, 100000, 500000)) +
    ylim(26, 48.5) +
    annotate(&amp;quot;text&amp;quot;, x = -125, y = 28.5, label = &amp;quot;Washington : 311&amp;quot;, color = &amp;quot;#F8766D&amp;quot;, hjust = 0, alpha = 0.6, size = 8) +
    annotate(&amp;quot;text&amp;quot;, x = -125, y = 26, label = &amp;quot;Lincoln : 205&amp;quot;, color = &amp;quot;#00BFC4&amp;quot;, hjust = 0, alpha = 0.6, size = 8) +
    labs(color = NULL) +
    guides(color = &amp;quot;none&amp;quot;,
           size = guide_legend(override.aes = list(alpha = 0.5))) +
    coord_map() +
    labs(title = &amp;quot;Cities, towns, and equivalents named after Washington and Lincoln&amp;quot;,
         subtitle = &amp;quot;State and counties are NOT included&amp;quot;,
         caption = &amp;quot;Source: decennial census 2010&amp;quot;) +
    theme_bw() +
    theme(legend.position = c(0.9, 0.),
          legend.justification = c(0.5, 0),
          legend.title = element_text(color = &amp;quot;grey40&amp;quot;),
          legend.text = element_text(color = &amp;quot;grey40&amp;quot;),
          panel.grid = element_blank(),
          panel.border = element_blank(),
          axis.title = element_blank(),
          axis.text = element_blank(),
          axis.ticks = element_blank(),
          plot.caption = element_text(hjust = 0.95, color = &amp;quot;grey30&amp;quot;),
          plot.title = element_text(color = &amp;quot;grey30&amp;quot;),
          plot.subtitle = element_text(color = &amp;quot;grey30&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bar plot of states with most cities or towns named after “Washington” or “Lincoln”,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# count
wl[, .(count = .N), by = .(area, state)] %&amp;gt;%
    .[state %in% c(&amp;quot;IN&amp;quot;, &amp;quot;OH&amp;quot;, &amp;quot;PA&amp;quot;, &amp;quot;MO&amp;quot;, &amp;quot;IA&amp;quot;, &amp;quot;KS&amp;quot;, &amp;quot;NE&amp;quot;, &amp;quot;WI&amp;quot;, &amp;quot;AR&amp;quot;)] %&amp;gt;%
    .[, state := factor(state, levels = c(&amp;quot;IA&amp;quot;, &amp;quot;OH&amp;quot;, &amp;quot;IN&amp;quot;, &amp;quot;KS&amp;quot;, &amp;quot;MO&amp;quot;, &amp;quot;PA&amp;quot;, &amp;quot;NE&amp;quot;, &amp;quot;WI&amp;quot;, &amp;quot;AR&amp;quot;))] %&amp;gt;%
    ggplot(aes(state, count, fill = area)) +
    geom_col(position = &amp;quot;dodge&amp;quot;, alpha = 0.6) +
    labs(title = &amp;#39;States with most cities and towns that have &amp;quot;Washington&amp;quot; or &amp;quot;Lincoln&amp;quot; in the name&amp;#39;,
         fill = NULL) +
    theme(legend.position = c(0.9, 0.85))&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Plot pie charts of racial composition in largest metro areas on a map in R</title>
      <link>/2018/01/17/create-pie-plots-on-a-map-in-r/</link>
      <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/17/create-pie-plots-on-a-map-in-r/</guid>
      <description>&lt;p&gt;Pie chart has been criticized for being a poor visualization and is not recommended in R community. The popular &lt;code&gt;ggplot2&lt;/code&gt; package discourages the use of pie charts and there is no dedicated &lt;code&gt;geom_pie&lt;/code&gt; for it.&lt;/p&gt;
&lt;p&gt;Although the criticism is mostly valid, there is a case that pie chart can be useful: pie charts on maps. Pie charting on map is a compact way to show composition by locations.&lt;/p&gt;
&lt;p&gt;A recent &lt;code&gt;R&lt;/code&gt; package, &lt;a href=&#34;https://github.com/GuangchuangYu/scatterpie&#34;&gt;&lt;code&gt;scatterpie&lt;/code&gt;&lt;/a&gt; by Guangchuang Yu, specializes in making pie charts at multiple locations. This package is an extension of &lt;code&gt;ggplot2&lt;/code&gt; so it will be easy for &lt;code&gt;ggplot2&lt;/code&gt; users.&lt;/p&gt;
&lt;p&gt;We will use &lt;code&gt;scatterpie&lt;/code&gt; package to plot the racial composition of largest metropolitan areas in the United state. The demographics data is extracted from 2016 American Community Survey 1-year estimate with &lt;a href=&#34;https://github.com/GL-Li/totalcensus&#34;&gt;&lt;code&gt;totalcensus&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;Let’s first load the required packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(scatterpie)
library(totalcensus)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we extract total population and population of selected races in metro areas from 2016 ACS 1-year estimate. We will only keep metro areas with population over one million.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# read all metro data
metro &amp;lt;- read_acs1year(
    year = 2016,
    states = &amp;quot;US&amp;quot;,
    table_contents = c(
        &amp;quot;white = C02003_003&amp;quot;, 
        &amp;quot;black = C02003_004&amp;quot;, 
        &amp;quot;asian = C02003_006&amp;quot;
    ),
    geo_headers = &amp;quot;CBSA&amp;quot;,
    summary_level = &amp;quot;310&amp;quot;
) %&amp;gt;%
    mutate(others = population - white - black - asian)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Reading US 2016 ACS 1-year survey geography file&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# keep only largest metro and make some cleaning
largest &amp;lt;- metro %&amp;gt;%
    filter(population &amp;gt; 1e6) %&amp;gt;%
    # Los Angeles metro changed CBSA from 31100 to 31080, hand correct the coordinate
    # mutate(lon = ifelse(GEOID == &amp;quot;31000US31080&amp;quot;, -118.18194, lon),
    #        lat = ifelse(GEOID == &amp;quot;31000US31080&amp;quot;, 34.10939, lat)) %&amp;gt;%
    select(NAME, lon, lat, total = population, white, black, asian, others) %&amp;gt;%
    arrange(-total)

head(largest, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                               NAME       lon      lat
## 1 New York-Newark-Jersey City, NY-NJ-PA Metro Area  -73.8745 40.77432
## 2    Los Angeles-Long Beach-Anaheim, CA Metro Area -118.1819 34.10939
## 3    Chicago-Naperville-Elgin, IL-IN-WI Metro Area  -87.8283 41.82352
##      total    white   black   asian  others
## 1 20153634 11704438 3430610 2215765 2802821
## 2 13310447  7080092  880118 2112197 3238040
## 3  9512968  6202988 1577873  617341 1114766&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the race data, we are ready to make pie plot on a map with package &lt;code&gt;scatterpie&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;us &amp;lt;- map_data(&amp;#39;state&amp;#39;)
ggplot(us, aes(long, lat)) +
    geom_map(map=us, aes(map_id=region), fill=&amp;quot;grey97&amp;quot;, color=&amp;quot;grey&amp;quot;) +
    geom_scatterpie(data = largest, 
                    aes(lon, lat, r = sqrt(total)/2000),
                    cols = c(&amp;quot;white&amp;quot;, &amp;quot;black&amp;quot;, &amp;quot;asian&amp;quot;, &amp;quot;others&amp;quot;), 
                    alpha = 0.5) +
    scale_fill_manual(
        breaks = c(&amp;quot;white&amp;quot;, &amp;quot;black&amp;quot;, &amp;quot;asian&amp;quot;, &amp;quot;others&amp;quot;),
        labels = c(&amp;quot;white alone&amp;quot;, &amp;quot;black alone&amp;quot;, &amp;quot;asian alone&amp;quot;, &amp;quot;others&amp;quot;),
        values = c(&amp;quot;asian&amp;quot; = &amp;quot;orange&amp;quot;,
                   &amp;quot;white&amp;quot; = &amp;quot;white&amp;quot;,
                   &amp;quot;black&amp;quot; = &amp;quot;black&amp;quot;,
                   &amp;quot;others&amp;quot; = &amp;quot;cyan&amp;quot;)
    ) +
    labs(title = &amp;quot;Races in metro areas over one million population&amp;quot;,
         subtitle = &amp;quot;others includes mixed races and American indians, Alaska natives, native Hawaiians and pacific islanders&amp;quot;,
         caption = &amp;quot;Source: 2016 ACS 1-year estimate&amp;quot;,
         fill = NULL) +
    coord_fixed() +
    theme_bw() +
    theme(legend.position = c(0.96, 0.02),
          legend.justification = c(1, 0),
          panel.grid = element_blank(),
          panel.border = element_blank(),
          axis.title = element_blank(),
          axis.text = element_blank(),
          axis.ticks = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2018-01-16-create-pie-plots-on-a-map-in-r_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Determine relationship between census geographic entities with totalcensus package</title>
      <link>/2017/12/28/use-totalcensus-package-to-determine-relationship-between-geographic-entities/</link>
      <pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/28/use-totalcensus-package-to-determine-relationship-between-geographic-entities/</guid>
      <description>&lt;p&gt;This is an application example of &lt;a href=&#34;https://github.com/GL-Li/totalcensus&#34;&gt;totalcensus package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The geographic hierarchy primer in &lt;a href=&#34;https://www.census.gov/prod/cen2010/doc/sf1.pdf&#34;&gt;Census 2010 summary file 1 technical documentation&lt;/a&gt; displays the relationship between geographic entities. The lower one of the two entities connected by a line is entirely within the boundary of the upper one. For example, a county subdivision is always within the boundaries of a county and a school district always within the boundaries of a state. If two entities are not connected, they may not belong to each other. For example, the ZIP code tabulation areas may cross state borders though they are much smaller than states.&lt;/p&gt;
&lt;p&gt;&lt;br&gt; &lt;img src=&#34;https://s3.amazonaws.com/gl-shared-pictures/hierarchy_census_geographic_entities.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;It is easy to get the summary statistics of lower geographies within a higher one when they are connected. For example, if we want the race population of all county subdivision in Kent county, RI, we can run&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(totalcensus)
library(data.table)
library(magrittr)
sub_kent &amp;lt;- read_acs5year(
    year = 2016,
    states = &amp;quot;RI&amp;quot;,
    areas = &amp;quot;Kent county, RI&amp;quot;,
    table_contents = c(
        &amp;quot;white = B02001_002&amp;quot;,
        &amp;quot;black = B02001_003&amp;quot;,
        &amp;quot;asian = B02001_005&amp;quot;
    ),
    summary_level = &amp;quot;070&amp;quot;  # of county subdivision
)

print(sub_kent)
    #               area                  GEOID       lon      lat state population white black asian GEOCOMP SUMLEV                                                                 NAME
    # 1: Kent County, RI 07000US440031864031240 -71.73078 41.69073    RI        728   724     0     4     all    070                 Greene CDP, Coventry town, Kent County, Rhode Island
    # 2: Kent County, RI 07000US440031864099999 -71.59396 41.69140    RI      34225 32994   384   187     all    070 Remainder of Coventry town, Coventry town, Kent County, Rhode Island
    # 3: Kent County, RI 07000US440032224099999 -71.48331 41.64415    RI      13104 12120    77   404     all    070  East Greenwich town, East Greenwich town, Kent County, Rhode Island
    # 4: Kent County, RI 07000US440037430074300 -71.42452 41.71389    RI      81881 74990  1163  2237     all    070                Warwick city, Warwick city, Kent County, Rhode Island
    # 5: Kent County, RI 07000US440037772099999 -71.65790 41.62810    RI       6112  5611    26   314     all    070  West Greenwich town, West Greenwich town, Kent County, Rhode Island
    # 6: Kent County, RI 07000US440037844099999 -71.51749 41.70306    RI      28836 26196   704   806     all    070      West Warwick town, West Warwick town, Kent County, Rhode Island&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If two geographic entities are not connected by a line, how do we know, for example, how many ZIP code tabulation areas are in or partially in Boston city?&lt;/p&gt;
&lt;p&gt;The key to answer this question is that census blocks are connected to and lower than all other geographies. We can connect any two geographic entities through census blocks: if an ZIP code tabulation area and Boston city share a census block, the ZIP code is in or partially in the city. The decennial census 2010 has data down to block level, with which we can find all zip codes in Boston using &lt;code&gt;totalcensus&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;zip_boston &amp;lt;- read_decennial(
    year = 2010,
    states = &amp;quot;MA&amp;quot;,
    geo_headers = c(&amp;quot;ZCTA5&amp;quot;, &amp;quot;PLACE&amp;quot;),
    summary_level = &amp;quot;block&amp;quot;
) %&amp;gt;%
    # use search_fips(&amp;quot;boston&amp;quot;, &amp;quot;MA&amp;quot;) to find its PLACE code is &amp;quot;07000&amp;quot;
    .[PLACE == &amp;quot;07000&amp;quot;, unique(ZCTA5)] 

zip_boston
# all zip code in Boston:
    #  [1] &amp;quot;02134&amp;quot; &amp;quot;02135&amp;quot; &amp;quot;02467&amp;quot; &amp;quot;02215&amp;quot; &amp;quot;02163&amp;quot; &amp;quot;02115&amp;quot; &amp;quot;02116&amp;quot; &amp;quot;02199&amp;quot;
    #  [9] &amp;quot;02108&amp;quot; &amp;quot;02114&amp;quot; &amp;quot;02113&amp;quot; &amp;quot;02109&amp;quot; &amp;quot;02110&amp;quot; &amp;quot;02203&amp;quot; &amp;quot;02129&amp;quot; &amp;quot;02128&amp;quot;
    # [17] &amp;quot;02127&amp;quot; &amp;quot;02210&amp;quot; &amp;quot;02118&amp;quot; &amp;quot;02111&amp;quot; &amp;quot;02119&amp;quot; &amp;quot;02120&amp;quot; &amp;quot;02130&amp;quot; &amp;quot;02121&amp;quot;
    # [25] &amp;quot;02125&amp;quot; &amp;quot;02122&amp;quot; &amp;quot;02124&amp;quot; &amp;quot;02126&amp;quot; &amp;quot;02131&amp;quot; &amp;quot;02132&amp;quot; &amp;quot;02136&amp;quot; &amp;quot;99999&amp;quot;
    # [33] &amp;quot;02152&amp;quot; &amp;quot;02151&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s read race population by zip code in or partially in Boston city from the latest 2016 ACS 5-year survey.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# read data for all zip code
race_zip_boston &amp;lt;- read_acs5year(
    year = 2016,
    states = &amp;quot;US&amp;quot;,   # ZCTA5 only in national files
    geo_headers = &amp;quot;ZCTA5&amp;quot;,
    table_contents = c(
        &amp;quot;white = B02001_002&amp;quot;,
        &amp;quot;black = B02001_003&amp;quot;,
        &amp;quot;asian = B02001_005&amp;quot;
    ),
    summary_level = &amp;quot;860&amp;quot;  # of ZCTA5
) %&amp;gt;%
    # select zip codes in or partially in Boston city
    .[ZCTA5 %in% zip_boston]

head(race_zip_boston, 3)
     #           GEOID       lon      lat ZCTA5 state population white black asian GEOCOMP SUMLEV        NAME
     # 1: 86000US02108 -71.06485 42.35777 02108    NA       4049  3515   209   172     all    860 ZCTA5 02108
     # 2: 86000US02109 -71.05063 42.36722 02109    NA       4015  3497   135   249     all    860 ZCTA5 02109
     # 3: 86000US02110 -71.04785 42.36196 02110    NA       2124  1814    83   206     all    860 ZCTA5 02110&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s examine another example: congressional districts (CD for 111th congress) and state legislative districts (SLDU for Upper Chamber year 1 and SLDL for Lower Chamber year 1). Both CD and SLDs descend from states but do not belong to each other. Usually SLDs are smaller than CD. So which SLDs are in or partially in each CD? Again, we can connect CD and SLD with census blocks using decennial census 2010 data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;vote_RI &amp;lt;- read_decennial(
    year = 2010,
    states = &amp;quot;RI&amp;quot;,
    geo_headers = c(&amp;quot;CD&amp;quot;, &amp;quot;SLDU&amp;quot;, &amp;quot;SLDL&amp;quot;),
    summary_level = &amp;quot;block&amp;quot;
) %&amp;gt;%
    .[, .(SLDU = list(unique(SLDU)), SLDL = list(unique(SLDL))), by = CD] 

# each CD contains a vector of SLDUs and a vector of SLDLs
    #    CD                             SLDU                             SLDL
    # 1: 01  c(009,011,010,012,013,023, ...)  c(066,067,069,068,072,075, ...)
    # 2: 02  c(024,033,035,031,029,028, ...)  c(040,026,028,025,029,027, ...)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Proccess 5-digit ZIP Code Tabulation Area (ZCTA5) data with totalcensus package</title>
      <link>/2017/12/23/census_data_zip_code/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/23/census_data_zip_code/</guid>
      <description>&lt;p&gt;This is an example of applications of &lt;code&gt;totalcensus&lt;/code&gt; package. To install the package, follow the instructions at &lt;a href=&#34;https://github.com/GL-Li/totalcensus&#34; class=&#34;uri&#34;&gt;https://github.com/GL-Li/totalcensus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this example, we examine data related to 5-digit ZIP Code Tabulation Area (ZCTA5), using 2016 ACS 5-year survey summary files. Let’s first load the libraries and then answer a couple questions related to zip code&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(totalcensus)
library(data.table)
library(magrittr)
library(ggplot2)
library(ggmap)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;whats-the-population-in-a-zcta5&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What’s the population in a ZCTA5&lt;/h3&gt;
&lt;p&gt;These population data can be easily obtained with the code below. There are 32898 ZCTA5s in the United States and a ZCTA5 has an average population of 9656 and a median population of 2780. The population distribution is highly skewed towards zero with 320 of them having no people living in and 1583 having population below 100. There are 252 zip code having population over 65000.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# read population in each zip code
zip_population &amp;lt;- read_acs5year(
    year = 2016,
    states = &amp;quot;US&amp;quot;,
    geo_headers = &amp;quot;ZCTA5&amp;quot;,
    summary_level = &amp;quot;860&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Reading US 2016 ACS 5-year survey geography file&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(zip_population$population)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##       0     714    2780    9656   13040  115104&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;median-age-in-a-zcta5&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Median age in a ZCTA5&lt;/h3&gt;
&lt;p&gt;Just for fun, let’s find out the median age of population living in each ZCTA5. The result is pretty interesting. After removing those ZCTA5s with population below 1000 and those with larger margin of error in median age estimate and population count, the smallest median age of a ZCTA5 is 19 and largest is 75.50. These numbers mean that some zip code tabulation area are dominated by very young people while some are dominated by very old people.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# read median age 
median_age &amp;lt;- read_acs5year(
    year = 2016,
    states = &amp;quot;US&amp;quot;,
    table_contents = &amp;quot;median_age = B01002_001&amp;quot;,
    geo_headers = &amp;quot;ZCTA5&amp;quot;,
    summary_level = &amp;quot;860&amp;quot;,
    with_margin = TRUE
) %&amp;gt;%
    # only keep good age estimate and population count
    .[median_age_margin &amp;lt; 0.1 * median_age] %&amp;gt;%
    .[population_margin &amp;lt; 0.1 * population] %&amp;gt;%
    # remove ZCTA5 with population below 1000
    .[population &amp;gt; 1000]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Reading US 2016 ACS 5-year survey geography file&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(median_age$median_age)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   19.00   35.60   39.90   39.89   43.90   75.50&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How are these extreme median ages possible for a zip code area which has thousands population? The young median age is easier to understand - many colleges are assigned exclusively with a zip code and the residents in this zip are mostly students living in dorms so the median age can be very low. The zip code areas with very old median age, though a surprise, are still understandable: these are the communities full of retired people.&lt;/p&gt;
&lt;p&gt;It is said that people like to go to South for warm weather after retirement. Can we see this from the median age data? Yes, old people went Florida!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# download US map
us_map &amp;lt;- get_map(&amp;quot;US&amp;quot;, zoom = 4, color = &amp;quot;bw&amp;quot;)

# plot ZCTA5 with 65 or up median age on map
ggmap(us_map) + 
    geom_point(data = median_age[median_age &amp;gt; 65], 
               aes(lon, lat, size = population),
               color = &amp;quot;red&amp;quot;,
               alpha = 0.5) +
    ylim(25, 50) +
    scale_size_area(max_size = 3) +
    labs(
        title = &amp;quot;ZIP code area with median age above 65&amp;quot;,
        caption = &amp;quot;Source: 2016 ACS 5-year survey&amp;quot;,
        x = NULL,
        y = NULL
    ) +
    theme(
        axis.text = element_blank(),
        axis.ticks = element_blank()
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/2017-12-23-use-totalcensus-package-to-extract-block-level-data-of-boston-grouped-by-zip-code_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>