<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Package on R &amp; Census</title>
    <link>http://www.gl-li.com/categories/package/</link>
    <description>Recent content in Package on R &amp; Census</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Sep 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://www.gl-li.com/categories/package/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Build a R package for yourself</title>
      <link>http://www.gl-li.com/2017/09/14/build-a-r-package-for-yourself/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.gl-li.com/2017/09/14/build-a-r-package-for-yourself/</guid>
      <description>&lt;p&gt;A R user can benefit a lot from building packages. I have read people writing about the benefit in various occasions and cannot agree more after building my first package. We don’t have to a be R developer to write packages. Developers write packages for others; we can just write packages for ourselves. As a R user, we must have written functions and collected datasets, and may have used them across projects or may want to use them later on. The conventional way to reuse functions is to copy and paste them to the new project or to load them by &lt;code&gt;source(xxx.R)&lt;/code&gt;, and the conventional way to reuse datasets it to load &lt;code&gt;.Rdata&lt;/code&gt; files which store the datasets. We will have to know where the functions and datasets are stored, which is not a easy job if we have a large collection. By building functions and datasets into a package, we keep them in one place and use them the same way as using any other packages. With the help of package documentation, these functions and datasets become our great asset.&lt;/p&gt;
&lt;p&gt;Building a R packages is actually far more easier than a R user could have expected. In RStudio, it is nothing but writing normal R code with formatted comments. If this package is just for ourselves, we can save the hassle of publishing it on github or CRAN.&lt;/p&gt;
&lt;p&gt;Below are step by step instructions of building a working package in RStudio. There are many great tutorials for building R packages. I try to make this one to be the simplest and most up to date.&lt;/p&gt;
&lt;div id=&#34;prepare-for-a-new-package-project&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prepare for a new package project&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Step 1 - install necessary packages&lt;/strong&gt; Update RStudio if it is very old. Start RStudio and install package &lt;code&gt;roxygen2&lt;/code&gt;. This package simplifies package documentation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;roxygen2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 2 - create a new package&lt;/strong&gt; From RStudio menu, click file then new project and choose to create project in a new directory. Select creating R package and name the package, for example, as &lt;code&gt;mytoolbox&lt;/code&gt; and place it in the directory of our choice. RStudio automatically creates several subdirectories and files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3 - allow roxygen2 to take care of documentation&lt;/strong&gt; From RStudio menu click build then configure build tools, verify package is selected in Project build tools, check the box for Generate documentation with roxygen, in the popup dialogue box check all boxes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4 - delete NAMESPACE file&lt;/strong&gt; to clear way for &lt;code&gt;roxygen2&lt;/code&gt; to automatically generate this file. Otherwise we will get a warning when building the package.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;add-functions-to-the-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add functions to the package&lt;/h2&gt;
&lt;p&gt;Create a &lt;code&gt;.R&lt;/code&gt; files for a function and save it in subdirectory &lt;code&gt;/R&lt;/code&gt;. A good practice is to have only one function in a &lt;code&gt;.R&lt;/code&gt; file. We can have as many files as needed for all functions under subdirectory &lt;code&gt;/R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.R&lt;/code&gt; file, let’s call it &lt;code&gt;mess_up_function.R&lt;/code&gt;, has two sections, as shown in the example code below. The first is the Roxygen comment section, of which each line starts with &lt;code&gt;#&#39;&lt;/code&gt;. Roxygen2 generates documentation of the function from these comments. Most tags in the comment section are self-explanatory, for example &lt;code&gt;@para&lt;/code&gt; for parameters and &lt;code&gt;@examples&lt;/code&gt; for examples. Pay attention to these three tags: 1) &lt;code&gt;#&#39; @export&lt;/code&gt; exports the function for package users. 2) &lt;code&gt;#&#39; @import package_name&lt;/code&gt; or &lt;code&gt;#&#39; @importFrom package_name function_1 function_2&lt;/code&gt; are to import whole packages or selected functions, depending on how we use these packages in building our own package. Import the whole package if we use many functions in the package; import only selected functions if we know we only need them.&lt;/p&gt;
&lt;p&gt;The second section is the R code where we define our function. This section is standard R code with one exception: never use &lt;code&gt;library(pkg_name)&lt;/code&gt; or &lt;code&gt;require(pkg_name)&lt;/code&gt; to load packages, as they may mess up with name space. Instead, use &lt;code&gt;#&#39; @import&lt;/code&gt; or &lt;code&gt;#&#39; @importFrom&lt;/code&gt; as discussed in the Roxygen comment section, or use &lt;code&gt;pkg_name::func()&lt;/code&gt;. The later method takes extra 4 microseconds for each run, which is acceptable for processing small datasets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#&amp;#39; mess up function (This is the title.)
#&amp;#39; 
#&amp;#39; @description This function mess up with two strings by extracting vowels from
#&amp;#39; the first string and attaching them to the second.
#&amp;#39;
#&amp;#39; @param string_1 the first string
#&amp;#39; @param string_2 the second string
#&amp;#39; 
#&amp;#39; @return a string 
#&amp;#39;
#&amp;#39; @examples
#&amp;#39; # example 1
#&amp;#39; mess_up(&amp;quot;The United States&amp;quot;, &amp;quot;Russia&amp;quot;)
#&amp;#39; 
#&amp;#39; # example 2
#&amp;#39; mess_up(&amp;quot;Barack Obama&amp;quot;, &amp;quot;Donald Trump&amp;quot;)

#&amp;#39; @export
#&amp;#39; 
#&amp;#39; @importFrom stringr str_extract_all


mess_up &amp;lt;- function(string_1, string_2){
    ## This function extract vowels from string_1 and place it 
    ## at the end of string_2
    vowels &amp;lt;- str_extract_all(string_1, &amp;quot;[AEIOUaeiou]&amp;quot;)[[1]]
    vowels &amp;lt;- paste0(vowels, collapse = &amp;quot;&amp;quot;)
    paste0(string_2, vowels, collapse = &amp;quot;&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;add-a-dataset-to-the-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add a dataset to the package&lt;/h2&gt;
&lt;div id=&#34;save-dataset-in-subdirectory-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;save dataset in subdirectory &lt;code&gt;/data&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This dataset can be a vector, a list, a data frame, or a data.table. Let’s call it &lt;code&gt;my_dataset&lt;/code&gt;. To add it to the package, simply save it as a &lt;code&gt;.RData&lt;/code&gt; file to the subdirectory &lt;code&gt;/data&lt;/code&gt; of the package by running&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# one .RData file has ONLY one dataset
save(my_dataset, file = &amp;quot;path_to_package/data/my_dataset.RData&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-.r-file-in-subdirectory-r-to-document-the-dataset&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;create a &lt;code&gt;.R&lt;/code&gt; file in subdirectory &lt;code&gt;/R&lt;/code&gt; to document the dataset&lt;/h3&gt;
&lt;p&gt;This dataset is ready to use, but a good practice is always to have a documentation for it. We can make a &lt;code&gt;doc_my_dataset.R&lt;/code&gt; file for data documentation. The file is almost completely Roxygen comments. The only line of non-comment code is the name of the dataset in quotation &lt;code&gt;&amp;quot;my_dataset&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#&amp;#39; Here is the title of the dataset
#&amp;#39;
#&amp;#39; @description More description of the dataset is here
#&amp;#39;
#&amp;#39; @docType data
#&amp;#39;
#&amp;#39; @usage data(&amp;quot;my_dataset&amp;quot;)
#&amp;#39;
#&amp;#39; @format data.frame
#&amp;#39;
#&amp;#39; @keywords datasets
#&amp;#39;
#&amp;#39; @source This is a link to 
#&amp;#39; \href{http://www.xxx.xxx.com/xxx.csv}{the origin data}
#&amp;#39;

&amp;quot;my_dataset&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;set-up-the-description-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Set up the DESCRIPTION file&lt;/h2&gt;
&lt;p&gt;This file mostly provides general information of the package. Many of them we may not care if we just write the package for ourselves. But two items are important: 1) If we want to load our dataset whenever loading the package, keep &lt;code&gt;LazyData: true&lt;/code&gt;. 2) Place all other packages used in the package under &lt;code&gt;Imports&lt;/code&gt;. In case others want to install this package, these packages will be installed automatically.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Package: my_package_name
Type: Package
Title: Title of package 
Version: 0.1.2
Author: my name
Maintainer: my name &amp;lt;myemail@xxx.com&amp;gt;
Description: Give a little bit more detailed description of the package which can 
    span multiple lines. 
License: your_choice
Encoding: UTF-8
LazyData: true
Imports:
    stringr (&amp;gt;= 1.2.0), 
    ggplot2 (&amp;gt;= 2.0.0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;build-the-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Build the package&lt;/h2&gt;
&lt;p&gt;The last step is to build the package, which is very easy in RStudio. From the menu select Build and then Build and Reload. RStudio will take care of all that follow. After the package is successfully built, we can use this package as any other package in our work with &lt;code&gt;library(mytoolbox)&lt;/code&gt; and enjoy the easy access to our functions and datasets.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>